generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String   @unique
  createdAt DateTime @default(now())

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  messages  Message[]
  chats     Chat[]
  reactions Reaction[]
}

model Chat {
  id            String   @id @default(cuid())
  isGroup       Boolean  @default(false)
  name          String?
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  messages     Message[]
  participants User[]
}

model Message {
  id        String     @id @default(cuid())
  text      String
  createdAt DateTime   @default(now())
  authorId  String
  chatId    String
  reactions Reaction[]

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  status   FriendshipStatus @default(PENDING)
  sender   User             @relation("SentRequests", fields: [senderId], references: [id])
  receiver User             @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model Reaction {
  id        String @id @default(cuid())
  emoji     String
  userId    String
  messageId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId])
}
